{
/*jshint laxcomma:false */

var DoctypeExpression          = require("./ast/doctype");
var RootNodeExpression         = require("./ast/rootNode");
var TextNodeExpression         = require("./ast/textNode");
var CommentNodeExpression      = require("./ast/commentNode");
var ElementNodeExpression      = require("./ast/elementNode");
var BlockBindingExpression     = require("./ast/blockBinding");
var DocTypeExpression          = require("./ast/doctype");
var TernaryConditionExpression = require("./ast/ternaryCondition");
var AssignmentExpression       = require("./ast/assignment");
var OperatorExpression         = require("./ast/operator");
var NotExpression              = require("./ast/not");
var LiteralExpression          = require("./ast/literal");
var StringExpression           = require("./ast/string");
var ReferenceExpression        = require("./ast/reference");
var HashExpression             = require("./ast/hash");
var ScriptExpression           = require("./ast/script");
var CallExpression             = require("./ast/call");
var ModifierExpression         = require("./ast/modifier");
var ArrayExpression            = require("./ast/array");
var ParametersExpression       = require("./ast/parameters");
var GroupExpression            = require("./ast/group");

function trimWhitespace(ws) {
  return trimNewLineChars(ws).replace(/(^\s+)|(\s+$)/, "");
}

function trimEnds(ws) {
  return ws.replace(/(^\s+)|(\s+$)/, "").replace(/[\r\n]/g, "\\n");
}

function trimNewLineChars(ws) {
  return ws.replace(/[ \r\n\t]+/g, " ");
}

function trimmedText() {
  return trimWhitespace(text());
}

function singleOrArrayExpression(values) {
  return values.length === 1 ? values[0] : new ArrayExpression(new ParametersExpression(values));
}

function attrValues(values) {

  values = values.filter(function(v) {
    return !/^[\n\t\r]+$/.test(v.value);
  });

  if (values.length === 1 && values[0].type === "string") {
    return values[0];
  } else {
    return new ArrayExpression(new ParametersExpression(values));
  }
}

function trimTextExpressions(expressions) {

  function _trim(exprs) {
    var expr;
    for (var i = exprs.length; i--;) {
      expr = exprs[i];
      if (expr.type == "textNode" && !/\S/.test(expr.value) && !expr.decoded) {
        exprs.splice(i, 1);
      } else {
        break;
      }
    }
    return exprs;
  }

  return _trim(_trim(expressions.reverse()).reverse());
}

}

Start
  = Template

Template
  = children:ChildNodes { return new RootNodeExpression(children); }

DocType
  = "<!DOCTYPE" _ info:[^>]+ _ ">" {
      return new DocTypeExpression(info.join(""));
    }

ChildNodes
  = children:(ElementNode/TextNode/BlockBinding/CommentNode)* { return new ArrayExpression(new ParametersExpression(trimTextExpressions(children))); }


CommentNode
  = _ "<!--" value:(!"-->" v:SourceCharacter { return v; })+ "-->" _ {
    return new CommentNodeExpression(trimEnds(value.join("")));
  }
  / DocType

ElementNode
  = startTag:StartTag children:ChildNodes endTag:EndTag {

    if (startTag.name != endTag.name) {
      expected("</" + startTag.name + ">");
    }

    return new ElementNodeExpression(startTag.name, startTag.attributes, children);
  }
  / StartEndTag

TextNode
  = value:TextCharacter+ {
      return new TextNodeExpression(trimNewLineChars(value.join("")));
    }

TextCharacter
  = !("<"/"{{") SourceCharacter {
      return text();
    }

StartTag
  = _ "<" info:TagInfo ">" _ { return info; }

StartEndTag
  = _ "<" info:TagInfo "/>" _ { return new ElementNodeExpression(info.name, info.attributes); }

TagInfo
  = name:TagName _ attributes:Attribute* _ {

      var attrs = {};

      for (var i = 0, n = attributes.length; i < n; i++) {
        var attr = attributes[i];
        attrs[attr.name] = attr.value;
      }

      return {
        name: name,
        attributes: new HashExpression(attrs)
      };
    }

EndTag
  = "</" name:TagName ">" {
      return {
        name: name
      };
    }

TagName
  = _ word:[a-zA-Z0-9:_\.-]+ { return word.join(""); }

Attribute
  = name:TagName _ "=" _ values:AttributeValues {
      return {
        name: name,
        value: values
      };
    }
  / name:TagName {
      return {
        name: name,
        value: new LiteralExpression(true)
      };
    }

AttributeValues
  = '"' values:(AttrTextBinding/(!"{{" [^"])+ { return new StringExpression(trimNewLineChars(text())); })* '"' { return attrValues(values); }
  / "'" values:(AttrTextBinding/(!"{{" [^'])+ { return new StringExpression(trimNewLineChars(text())); })* "'" { return attrValues(values); }
  / binding:AttrTextBinding { return attrValues([binding]); }

BlockBinding
  = "{{#" blockBinding:StartBlockBinding { return blockBinding; }
  / TextBinding


StartBlockBinding
  = scripts:SingleScript _ fragment:Template _ child:ChildBlockBinding {
      return new BlockBindingExpression(scripts, fragment, child);
    }

ChildBlockBinding
  = "{{/" blockBinding:StartBlockBinding { return new RootNodeExpression(blockBinding); }
  / "{{/}}" _ { return void 0; }

TextBinding
  = "{{" _ scripts:Scripts _ "}}" {
      return new BlockBindingExpression(scripts);
    }

AttrTextBinding
  = "{{" _ scripts:Scripts _ "}}" {
      return scripts;
    }


SingleScript
  = _ scriptName:ReferenceName _ "}}" {
      var hash = {};
      hash[scriptName] = new ScriptExpression(new LiteralExpression(true));
      return new HashExpression(hash);
    }
  / scripts:Scripts _ "}}" {
      return scripts;
    }

Scripts
  = scripts:HashValues {
      for (var k in scripts) {
        scripts[k] = new ScriptExpression(scripts[k]);
      }
      return new HashExpression(scripts);
    }
  / _ value:Expression _ ascripts:("," HashValuesArray)*  {

      var scripts = {
        value: new ScriptExpression(value)
      };

      ascripts = ascripts.length ? ascripts[0][1] : [];
      for (var i = 0, n = ascripts.length; i < n; i++) {
        scripts[ascripts[i].key] = new ScriptExpression(ascripts[i].value);
      }

      return new HashExpression(scripts);
    }


Expression
  = TernaryConditional

TernaryConditional
  = condition:Assignment "?" left:TernaryConditional ":" right:TernaryConditional {
      return new TernaryConditionExpression(condition, left, right);
    }
  / Assignment

Parameters
  = "(" params:InnerParameters ")" {
      return params;
    }
  / "()" { return []; }

InnerParameters
  = param1:Expression rest:("," Expression)* {
      return [param1].concat(rest.map(function(v) {
        return v[1];
      }));
    }

Assignment
  = left:ObjectReference "=" right:Assignment {
      return new AssignmentExpression(left, right);
    }
  / Operation

Operation
  = left:Operatable operator: ("&&" / "||" / "===" / "==" / "!==" / "!=" / ">==" / ">=" / ">" / "<==" / "<=" / "<" / "+" / "-" / "%" / "*" / "/") right:Operation {
      return new OperatorExpression(operator, left, right);
    }
  / Operatable


Operatable
  = _ value:Modifiers _ { return value; }

Modifiers
  = expression:Not modifiers:Modifier* {

      for (var i = 0, n = modifiers.length; i < n; i++) {
        expression = new ModifierExpression(modifiers[i].name, new ParametersExpression([expression].concat(modifiers[i].parameters)));
      }

      return expression;
    }
  / (FunctionCall/ObjectReference)

Modifier
  = "|" _ name:ReferenceName parameters:Parameters? _ {
    return {
      name: name,
      parameters: parameters || []
    };
  }

ObjectReference
  = _ context:Object _ { return context; }

Not
  = not:("!"/"-") value:Not {
      return new NotExpression(not, value);
    }
  / Reserved/FunctionCall/ObjectReference

Object
  = Group/Hash/Number/StringLiteral/Reference

Number
  = value:("-"? ([0-9]+DecimalNumber? / DecimalNumber)) {
      return new LiteralExpression(parseFloat(text()));
    }

DecimalNumber
  = "." [0-9]+

Group
  = "(" group:Expression ")" { return new GroupExpression(group); }

Reserved
  = expression:(Boolean / Undefined / Null / NaN / Infinity) {
      return new LiteralExpression(expression.value);
    }

Boolean
  = value:("true"/"false") {
      return {
        type: "boolean",
        value: value === "true"
      };
    }

Undefined
  = "undefined" { return { type: "undefined", value: void 0 }; }

NaN
  = "NaN" { return { type: "nan", value: NaN }; }

Infinity
  = "Infinity" { return { type: "infinity", value: Infinity }; }

Null
  = ("null"/"NULL") { return { type: "null", value: null }; }

FunctionCall
  = reference:ObjectReference parameters:Parameters {
      return new CallExpression(reference, new ParametersExpression(parameters));
    }

Reference
  = bindingType:("^"/"~>"/"<~>"/"~"/"<~")? _ reference:ReferenceName path:("." ReferenceName)* _ {
      path = [reference].concat(path.map(function(p) { return p[1]; }));
      return new ReferenceExpression(path, bindingType);
    }

ReferenceName
  = name:[a-zA-Z_$0-9]+ { return text(); }

Hash
  = "{" _ values:HashValues? _ "}" {
      return new HashExpression(values);
    }

HashValues
  = values:HashValuesArray {
      var s = {};
      for (var i = 0, n = values.length; i < n; i++) {
        s[values[i].key] = values[i].value;
      }
      return s;
    }


HashValuesArray
  = firstValue:HashValue additionalValues:("," HashValuesArray)* {
      return [
        firstValue
      ].concat(additionalValues.length ? additionalValues[0][1] : []);
    }

HashValue
  = _ key:HashKey _":" value:Expression? {
      return {
        key: key,
        value: value || new LiteralExpression(void 0)
      };
    }

HashKey
  = key:StringLiteral { return key.value; }
  / key:ReferenceName { return key; }


StringLiteral "string"
  = '"' chars:DoubleStringCharacter* '"' {
      return new StringExpression(chars.join(""));
    }
  / "'" chars:SingleStringCharacter* "'" {
      return new StringExpression(chars.join(""));
    }

DoubleStringCharacter
  = !('"' / "\\") SourceCharacter { return text(); }
  / '\\"'

SingleStringCharacter
  = !("'" / "\\") SourceCharacter { return text(); }
  / "\\'"

SourceCharacter
  = .

Word
  = chars:[a-zA-Z]+ { return chars.join(""); }

_
  = [ \n\r\t]*

_nl
  = [\n\r\t]*
